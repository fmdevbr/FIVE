/**
 * Copyright 2011 Federal University of Pernambuco. All Rights Reserved. Use is
 * subject to license terms.
 *
 * This file is part of FIVE (Framework for an Integrated Voice Environment).
 *
 */
package br.ufpe.cin.five.gui.dialogs;

import br.ufpe.cin.five.core.classification.Classification;
import br.ufpe.cin.five.core.extraction.Extraction;
import br.ufpe.cin.five.core.project.ProjectUtil;
import br.ufpe.cin.five.core.sample.Sample;
import br.ufpe.cin.five.core.sample.SampleFilter;
import br.ufpe.cin.five.facade.Facade;
import br.ufpe.cin.five.util.DocumentOutputStream;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.*;
import java.util.List;
import java.util.concurrent.CancellationException;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;

/**
 *
 * @author Alexandre
 */
public class ResultsDialog extends javax.swing.JDialog implements PropertyChangeListener, WindowListener {

    private static final Logger logger = Logger.getLogger(ResultsDialog.class);
    private Facade facade = Facade.getInstance();
    private FiveWorker worker;
    private Classification classification;
    private Extraction extraction;
    private List<Sample> samples;
    private SampleFilter sampleFilter;
    private int trainPercentage;
    private int testPercentage;
    private String operation;

    /**
     * Creates new form ResultsDialog
     */
    public ResultsDialog(java.awt.Frame parent, boolean modal, Classification classification) {
        super(parent, modal);

        operation = "Classificação de Padrões";
        this.setTitle("Resultados da Classificação de Padrões");
        logger.info("Inicializando Results Dialog. " + operation + ": " + classification.getDescription() + "]");

        this.classification = classification;

        initComponents();

        this.addWindowListener(this);
    }

    public ResultsDialog(java.awt.Frame parent, boolean modal, Extraction extraction) {
        super(parent, modal);

        operation = "Extração de Características";
        this.setTitle("Resultados da Extração de Características");
        logger.info("Inicializando Results Dialog. " + operation + ": " + extraction.getDescription() + "]");

        this.extraction = extraction;

        initComponents();

        btSave.setVisible(false);

        this.addWindowListener(this);
    }
 
    public ResultsDialog(java.awt.Frame parent, boolean modal, List<Sample> samples) {
        super(parent, modal);

        operation = "Cálculo do SNR";
        this.setTitle("Resultados do Cálculo do SNR");
        logger.info("Inicializando Results Dialog. [" + operation + "]");

        this.samples = samples;

        initComponents();

        btSave.setVisible(false);

        this.addWindowListener(this);
    }
    
    public ResultsDialog(java.awt.Frame parent, boolean modal, SampleFilter sampleFilter, int trainPercentage, int testPercentage) {
        super(parent, modal);

        operation = "Separação da Base de Dados";
        this.setTitle("Resultados da Separação da Base de Dados");
        logger.info("Inicializando Results Dialog. [" + operation + "]");

        this.sampleFilter = sampleFilter;
        this.trainPercentage = trainPercentage;
        this.testPercentage = testPercentage;
        
        initComponents();

        btSave.setVisible(false);

        this.addWindowListener(this);
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taResults = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        btClose = new javax.swing.JButton();
        btSave = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Resultados:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        taResults.setColumns(20);
        taResults.setFont(new java.awt.Font("Lucida Console", 0, 13)); // NOI18N
        taResults.setRows(5);
        jScrollPane1.setViewportView(taResults);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btClose.setText("Fechar");
        btClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCloseActionPerformed(evt);
            }
        });

        btSave.setText("Salvar");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btClose)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btClose)
                    .addComponent(btSave))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCloseActionPerformed
        setVisible(false);
        this.worker.cancel(true);
    }//GEN-LAST:event_btCloseActionPerformed

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        try {
            this.extraction = facade.searchExtraction(true);
            
            String resultsPath = facade.getProject().getDirectory() + File.separator + "results";
            String resultsFileName = facade.getProject().getName() + "_ext" + extraction.getId() + "_cla" + classification.getId() + ".res";

            logger.info("Salvando o resultado no arquivo " + resultsPath + File.separator + resultsFileName.toLowerCase());

            BufferedWriter out = new BufferedWriter(new FileWriter(resultsPath + File.separator + resultsFileName.toLowerCase()));
            out.write(taResults.getText());
            out.close();
            
            String modelsPath = facade.getProject().getDirectory() + File.separator + "models";
            String modelsFileName = facade.getProject().getName() + "_ext" + extraction.getId() + "_cla" + classification.getId() + ".mod";

            logger.info("Renomeando o arquivo de modelos " + modelsPath + File.separator + modelsFileName.toLowerCase());

            String tempPath = facade.getProject().getDirectory() + File.separator + "temp";
            ProjectUtil.copyFile(tempPath + File.separator + "models.mod", modelsPath + File.separator + modelsFileName.toLowerCase());

            logger.info("Resultado salvo com sucesso.");
            JOptionPane.showMessageDialog(null, "Resultado salvo com sucesso.");     
            
            this.setVisible(false);
        } catch (Exception ex) {
            logger.error(ex.getMessage());
            JOptionPane.showMessageDialog(null, ex.getMessage());             
        }
    }//GEN-LAST:event_btSaveActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btClose;
    private javax.swing.JButton btSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea taResults;
    // End of variables declaration//GEN-END:variables

    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress".equals(evt.getPropertyName())) {
            int progress = (Integer) evt.getNewValue();
            jProgressBar1.setValue(progress);
        } else if ("done".equals(evt.getPropertyName())) {
            if (this.worker.getException() == null) {
                logger.info(operation + " realizado(a) com sucesso.");
                JOptionPane.showMessageDialog(this, operation + " realizado(a) com sucesso. ", operation, JOptionPane.INFORMATION_MESSAGE);
            }
        } else if ("state".equals(evt.getPropertyName())) {
            if (this.worker.getException() != null) {
                if (worker.getException() instanceof CancellationException) {
                    logger.error(worker.getException().getCause());
                    JOptionPane.showMessageDialog(this, "Operacao Cancelada!", operation, JOptionPane.ERROR_MESSAGE);
                } else {
                    logger.error(worker.getException().toString());
                    JOptionPane.showMessageDialog(this, "Error: " + worker.getException().getMessage(), operation, JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    public void windowOpened(WindowEvent e) {
        try {
            DocumentOutputStream dos = new DocumentOutputStream(taResults.getDocument());
            System.setOut(new PrintStream(dos));

            logger.info("Tipo de projeto = " + facade.getProject().getType());

            if (classification != null) {
                this.worker = facade.getClassificationWorker(classification, facade.getProject());
            } else if (extraction != null) {
                this.worker = facade.getExtractionWorker(extraction, facade.getProject());
            } else if (samples != null) {
                this.worker = facade.getCalculateSNRWorker(samples);
            } else if (sampleFilter != null && trainPercentage > 0 && testPercentage > 0) {
                this.worker = facade.getSeparateDataBaseWorker(sampleFilter, trainPercentage, testPercentage);
            }
            if (this.worker != null) {
                this.worker.addPropertyChangeListener(this);
                this.worker.execute();
            }
        } catch (Exception ex) {
            logger.error(ex);
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }

    public void windowClosing(WindowEvent e) {
    }

    public void windowClosed(WindowEvent e) {
    }

    public void windowIconified(WindowEvent e) {
    }

    public void windowDeiconified(WindowEvent e) {
    }

    public void windowActivated(WindowEvent e) {
    }

    public void windowDeactivated(WindowEvent e) {
    }
}
