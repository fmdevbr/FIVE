/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufpe.cin.five.gui.sample;

import br.ufpe.cin.five.core.dictionary.PhoneticRepresentation;
import br.ufpe.cin.five.core.project.ProjectUtil;
import br.ufpe.cin.five.core.sample.Environment;
import br.ufpe.cin.five.core.sample.Sample;
import br.ufpe.cin.five.core.speaker.Speaker;
import br.ufpe.cin.five.core.utterance.Utterance;
import br.ufpe.cin.five.exception.RegisterException;
import br.ufpe.cin.five.facade.Facade;

import br.ufpe.cin.five.register.ProjectRegister;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author vocallab-pablo
 */
public class SmartImportDialog extends javax.swing.JDialog {

    /**
     * Creates new form SmartImportDialog
     */
    public SmartImportDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadSpeakers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Pasta de Samples");

        jLabel3.setText("Locuções");

        jScrollPane2.setViewportView(jList2);

        jButton1.setText("Abrir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Importar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Amostras");

        jScrollPane1.setViewportView(jList1);

        jLabel4.setText("Locutor:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        JFileChooser jFChooser = new JFileChooser();
        jFChooser.showOpenDialog(this);

        jTextField1.setText(jFChooser.getSelectedFile().getParentFile().toString());

        addAllLinesTableSample();
    }//GEN-LAST:event_jButton1ActionPerformed

    
    protected void loadSpeakers()
    {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        for(Speaker s : Facade.getInstance().getProject().getSpeakers())        
            model.addElement(s.getName());
            
        jComboBox1.setModel(model);
    }
    
 protected void addLineTableSample(Utterance utterance, DefaultListModel model) {

        try {                        
            model.addElement(utterance.getDescription());                             
        } catch (Exception ex) {            
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }

  
    public void addAllLinesTableSample() {  
         DefaultListModel model = new DefaultListModel();
         
        for (Utterance utterance : Facade.getInstance().getProject().getUtterances()) 
            addLineTableSample(utterance,model);
        
        
        jList2.setModel(model);
    }
    
    public Speaker getSpeaker(String name)
    {
        for(Speaker s : Facade.getInstance().getProject().getSpeakers())
            if(s.getName().equals(name))
                return s;
        
        return null;
            
    }
    
    
    public Utterance getUtterance(String description)
    {
        for(Utterance u : Facade.getInstance().getProject().getUtterances())
            if(u.getDescription().equals(description))
                return u;
        
        return null;
    }
    
    public void smartImport(String path)
    {
        File diretorio = new File(path);
        File fList[] = diretorio.listFiles();
        
        List<PhoneticRepresentation> phonetics = new ArrayList<PhoneticRepresentation>();
        int i=0; // utterance index;
       Arrays.sort(fList, new FilesComparatorUtils());
        for(File f : fList)
        {
            try {
                Sample sample = new Sample();
                        
                Speaker speaker = getSpeaker(jComboBox1.getSelectedItem().toString());
                sample.setSpeaker(speaker);

                Utterance utterance = getUtterance(jList2.getModel().getElementAt(i).toString());
                sample.setUtterance(utterance);
                i++;

                sample.setEnvironment(Environment.ESTUDIO);
                sample.setGenuine(true);

                String projectName = Facade.getInstance().getProject().getName();
                String selectedSpeaker = speaker.getId()+"";
                String selectedUtterance = utterance.getId() + "";
                String nextSampleId = ProjectRegister.getNextSampleId(Facade.getInstance().getProject()) + "";

                String fileName = projectName + "_" + selectedSpeaker + "_" + selectedUtterance + "_" + nextSampleId + ".wav";                    
                sample.setAudioFile(fileName);

                //Copiando o arquivo para a pasta waves                    
                fileName = "samples" + File.separator + fileName;
               // textArea.append(file.getName() + " > " + fileName + "\n");
                fileName = Facade.getInstance().getProject().getDirectory() + File.separator + fileName;
      
                ProjectUtil.copyFile(f.getPath(), fileName);
     
                Facade.getInstance().insertSample(sample);
            } catch (Exception ex) {
                Logger.getLogger(SmartImportDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

    smartImport(jTextField1.getText());
    
    this.dispose();
            
   
  }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SmartImportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SmartImportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SmartImportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SmartImportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                SmartImportDialog dialog = new SmartImportDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
class FilesComparatorUtils implements Comparator<File>
    {
      private String str1, str2;
      private int pos1, pos2, len1, len2;

    @Override
      public int compare(File f1, File f2)
      {
        str1 = f1.getName();
        str2 = f2.getName();
        len1 = str1.length();
        len2 = str2.length();
        pos1 = pos2 = 0;

        int result = 0;
        while (result == 0 && pos1 < len1 && pos2 < len2)
        {
          char ch1 = str1.charAt(pos1);
          char ch2 = str2.charAt(pos2);

          if (Character.isDigit(ch1))
          {
            result = Character.isDigit(ch2) ? compareNumbers() : -1;
          }
          else if (Character.isLetter(ch1))
          {
            result = Character.isLetter(ch2) ? compareOther(true) : 1;
          }
          else
          {
            result = Character.isDigit(ch2) ? 1
                   : Character.isLetter(ch2) ? -1
                   : compareOther(false);
          }

          pos1++;
          pos2++;
        }

        return result == 0 ? len1 - len2 : result;
      }

      private int compareNumbers()
      {
        int end1 = pos1 + 1;
        while (end1 < len1 && Character.isDigit(str1.charAt(end1)))
        {
          end1++;
        }
        int fullLen1 = end1 - pos1;
        while (pos1 < end1 && str1.charAt(pos1) == '0')
        {
          pos1++;
        }

        int end2 = pos2 + 1;
        while (end2 < len2 && Character.isDigit(str2.charAt(end2)))
        {
          end2++;
        }
        int fullLen2 = end2 - pos2;
        while (pos2 < end2 && str2.charAt(pos2) == '0')
        {
          pos2++;
        }

        int delta = (end1 - pos1) - (end2 - pos2);
        if (delta != 0)
        {
          return delta;
        }

        while (pos1 < end1 && pos2 < end2)
        {
          delta = str1.charAt(pos1++) - str2.charAt(pos2++);
          if (delta != 0)
          {
            return delta;
          }
        }

        pos1--;
        pos2--; 

        return fullLen2 - fullLen1;
      }

      private int compareOther(boolean isLetters)
      {
        char ch1 = str1.charAt(pos1);
        char ch2 = str2.charAt(pos2);

        if (ch1 == ch2)
        {
          return 0;
        }

        if (isLetters)
        {
          ch1 = Character.toUpperCase(ch1);
          ch2 = Character.toUpperCase(ch2);
          if (ch1 != ch2)
          {
            ch1 = Character.toLowerCase(ch1);
            ch2 = Character.toLowerCase(ch2);
          }
        }

        return ch1 - ch2;
      }


    }
